$ ->
  goToByScroll = (id) ->
    id = id.replace('link', '')
    $('html,body').animate {scrollTop: $('#' + id).offset().top - 200}, 'slow'
    return

  clearForm = () ->
    # $(".powerdns_record_name").val('')
    # $(".powerdns_record_content").val('')
    $(".powerdns_record_prio").val('')
    $(".powerdns_record_preferences_port").val('')
    $(".powerdns_record_preferences_weight").val('')
    $(".powerdns_record_preferences_srv_content").val('')

  change_fields = (type) ->
    if type == "SRV"
      $(".srv-fields").show()
      $(".non-srv-fields").hide()
    else
      $(".srv-fields").hide()
      $(".non-srv-fields").show()

    if type == "MX" || type == "SRV"
      $(".priority-div :input").attr("disabled", false)
    else
      $(".priority-div :input").attr("disabled", true)
    return

  change_validators = (type) ->
    valid_domain = /^(([a-zA-Z0-9-_\.\-]{1})|([a-zA-Z0-9-_\.\-]{1}[a-zA-Z0-9-_\.\-]{1})|([a-zA-Z0-9-_\.\-]{1}[0-9]{1})|([0-9]{1}[a-zA-Z0-9-_\.\-]{1})|([a-zA-Z0-90-9-_\.\-][a-zA-Z0-9-0-9-_\.\-]{1,61}[a-zA-Z0-9-\.\-]))\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,3})$/
    valid_ip = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
    valid_ipv6 = /(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$)/
    has_more_than_one_dot = /.*\..*\../
    printable_ascii_char = /^[ -~]*$/

    $.validator.addMethod 'domainNameValidation', ((value, element) ->
      if value == ""
        valid = true
      else
        valid = valid_domain.test value
      valid == true
    ), 'It should be a valid Domain Name.'

    $.validator.addMethod 'uniqueness', ((value, element) ->
      records     = $("#powerdns_record_name").data("records")
      domain_name = $("#powerdns_record_name").data("domain")
      valid = true
      if $.inArray(value + "." + domain_name, records.split(" ")) > -1
        valid = false
      valid == true
    ), 'CNAME type should have a unique name.'

    switch type
      when "NS", "CNAME"
        $.validator.addMethod 'powerdnsContentValidation', ((value, element) ->
          valid_domain.test value
        ), 'It should be a valid Domain format'
      when "A"
        $.validator.addMethod 'powerdnsContentValidation', ((value, element) ->
          valid_ip.test value
        ), 'It should be a valid IP address format.'
      when "AAAA"
        $.validator.addMethod 'powerdnsContentValidation', ((value, element) ->
          valid_ipv6.test value
        ), 'It should be a valid IPv6 format.'
      when "TXT"
        $.validator.addMethod 'powerdnsContentValidation', ((value, element) ->
          printable_ascii_char.test value
        ), 'It should be a printable ASCII Char.'
      when "SRV" then
    return

  validatePowerdnsForm = (thisFormID) ->
    record_type = undefined
    $("#" + thisFormID).validate
      errorPlacement: (label, element) ->
        label.addClass('error-validator-label')
        label.insertAfter(element)
      rules:
        "powerdns_record[name]":
          required: depends: (element) ->
            record_type = $("#" + thisFormID).find(".powerdns_record_type :input").val()
            record_type == 'NS' || record_type == 'CNAME'
          uniqueness: depends: (element) ->
            record_type = $("#" + thisFormID).find(".powerdns_record_type :input").val()
            record_type == 'CNAME'
        "powerdns_record[type]":
          required: true
          remote:
            url: "/powerdns/records/check_if_exists",
            method: "GET",
            data:
              name: ->
                return $("#" + thisFormID).find(".powerdns_record_name :input").val() + "." +$("#powerdns_record_name").data("domain")
              content: ->
                return $("#" + thisFormID).find(".powerdns_record_content :input").val()
              type: ->
                return $("#" + thisFormID).find(".powerdns_record_type :input").val()
              srv_port: ->
                return $("#" + thisFormID).find(".powerdns_record_preferences_port :input").val()
              srv_weight: ->
                return $("#" + thisFormID).find(".powerdns_record_preferences_weight :input").val()
              srv_content: ->
                return $("#" + thisFormID).find(".powerdns_record_preferences_srv_content :input").val()
            complete: (data) ->
              if data.responseText != "true"
                $(".submitDnsDynamicForm").removeClass("disabled")
                $(".cancelDnsDynamicForm").removeClass("disabled")
                $(document.body).css 'cursor': 'default'
        "powerdns_record[prio]":
          required: depends: (element) ->
            record_type = $("#" + thisFormID).find(".powerdns_record_type :input").val()
            record_type == 'MX' || record_type == 'SRV'
          number: true
        "powerdns_record[content]":
          required: depends: (element) ->
            record_type != ''
          powerdnsContentValidation:
            depends: (element) ->
              record_type = $("#" + thisFormID).find(".powerdns_record_type :input").val()
              record_type == 'AAAA' || record_type == 'A' || record_type == 'NS' || record_type == 'TXT' || record_type == 'CNAME'
        "powerdns_record[preferences][weight]":
          required: true,
          number: true
        "powerdns_record[preferences][port]":
          required: true,
          number: true
        "powerdns_record[preferences][srv_content]":
          required: true,
          domainNameValidation: true
      highlight: (element) ->
        $(element).addClass('has-input-error')
      unhighlight: (element) ->
        $(element).removeClass('has-input-error')
    return

  $("#pdnsNewDynamicTableForm").on "mouseenter", ".submitDnsDynamicForm", (e) ->
    thisFormID = $(this).parent().parent().parent().attr('id')
    validatePowerdnsForm(thisFormID)
    $("#" + thisFormID).find(".powerdns_record_type").removeData('previousValue')
    $("#" + thisFormID).validate().element(".powerdns_record_type")
    $("#" + thisFormID).valid()

  $("#pdnsNewDynamicTableForm").on "mouseenter", "#submitEditDnsDynamicForm", (e) ->
    thisFormID = $(this).parent().parent().parent().attr('id')
    validatePowerdnsForm(thisFormID)
    # $("#" + thisFormID).find(".powerdns_record_type").removeData('previousValue')
    # $("#" + thisFormID).validate().element(".powerdns_record_type")
    # $("#" + thisFormID).valid()

  $("#addPowerDnsBtn").click (e) ->
    e.preventDefault()
    pdnsFormTemplate = $("#new_powerdns_record").clone()
    pdnsFormTemplate.removeAttr("id")
    pdnsFormTemplate.attr("id", "new_powerdns_record_dynamic_form")
    $("#dnsDynamicForm").html(pdnsFormTemplate)
    $(".submitDnsDynamicForm").removeClass("disabled")
    $(".cancelDnsDynamicForm").removeClass("disabled")
    goToByScroll($("#dnsDynamicForm").attr("id"))

  $("#pdnsNewDynamicTableForm").on "click", ".pdnsEditButton", (e) ->
    $(document.body).css 'cursor': 'wait'

  $("#pdnsNewDynamicTableForm").on "click", ".pdnsDeleteButton", (e) ->

  $("#pdnsNewDynamicTableForm").on "click", ".submitDnsDynamicForm", (e) ->
    if $("#new_powerdns_record_dynamic_form").valid()
      $(".submitDnsDynamicForm").addClass("disabled")
      $(".cancelDnsDynamicForm").addClass("disabled")
      $(document.body).css 'cursor': 'wait'

  $("#pdnsNewDynamicTableForm").on "click", "#submitEditDnsDynamicForm", (e) ->
    if $(".new_powerdns_record").valid()
      $("#submitEditDnsDynamicForm").addClass("disabled")
      $("#cancelEditDnsDynamicForm").addClass("disabled")
      $(document.body).css 'cursor': 'wait'

  $("#pdnsNewDynamicTableForm").on "click", "#cancelEditDnsDynamicForm", (e) ->
    $("#submitEditDnsDynamicForm").addClass("disabled")
    $("#cancelEditDnsDynamicForm").addClass("disabled")
    $(document.body).css 'cursor': 'wait'

  $("#pdnsNewDynamicTableForm").on "click", ".cancelDnsDynamicForm", (e) ->
    e.preventDefault()
    $(this).parent().parent().parent().remove()

  $("#pdnsNewDynamicTableForm").on "click", "#powerdns_record_type", (e) ->
    record_type = $(this).val()
    change_fields(record_type)
    change_validators(record_type)
    clearForm()

  $("#pdnsNewDynamicTableForm").on "keyup", "#powerdns_record_type", (e) ->
    record_type = $(this).val()
    change_fields(record_type)
    change_validators(record_type)
    clearForm()

  # $("#pdnsNewDynamicTableForm").on "keypress cut copy paste", ".numbersOnly", (e) ->
  #   if isNaN(@value + '' + String.fromCharCode(e.charCode))
  #     return false
  #   return
