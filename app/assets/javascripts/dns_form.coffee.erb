$ ->
  goToByScroll = (id) ->
    id = id.replace('link', '')
    $('html,body').animate {scrollTop: $('#' + id).offset().top - 200}, 'slow'
    return

  clearForm = () ->
    $(".powerdns_record_prio").val('')
    $(".powerdns_record_preferences_port").val('')
    $(".powerdns_record_preferences_weight").val('')
    $(".powerdns_record_preferences_srv_content").val('')

  change_fields = (type) ->
    if type == "SRV"
      $(".srv-fields").show()
      $(".non-srv-fields").hide()
    else
      $(".srv-fields").hide()
      $(".non-srv-fields").show()

    if type == "MX" || type == "SRV"
      $(".priority-div :input").attr("disabled", false)
    else
      $(".priority-div :input").attr("disabled", true)
    return

  change_validators = (type) ->
    valid_domain = /^(([a-zA-Z0-9-_\.\-]{1})|([a-zA-Z0-9-_\.\-]{1}[a-zA-Z0-9-_\.\-]{1})|([a-zA-Z0-9-_\.\-]{1}[0-9]{1})|([0-9]{1}[a-zA-Z0-9-_\.\-]{1})|([a-zA-Z0-90-9-_\.\-][a-zA-Z0-9-0-9-_\.\-]{1,61}[a-zA-Z0-9-\.\-]))\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,3})$/
    valid_ip = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
    valid_ipv6 = /(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$)/
    has_more_than_one_dot = /.*\..*\../
    printable_ascii_char = /^[ -~]*$/

    $.validator.addMethod 'domainNameValidation', ((value, element) ->
      if value == ""
        valid = true
      else
        valid = valid_domain.test value
      valid == true
    ), 'It should be a valid Domain Name.'

    $.validator.addMethod 'uniqueness', ((value, element) ->
      records     = $("#powerdns_record_name").data("records")
      domain_name = $("#powerdns_record_name").data("domain")
      valid = true
      if $.inArray(value + "." + domain_name, records.split(" ")) > -1
        valid = false
      valid == true
    ), 'CNAME type should have a unique name.'

    $.validator.addMethod 'validPdnsName', ((value, element) ->
      valid = true
      has_consecutive_dash = /--/
      all_numeric = /^[0-9]+$/
      starts_with_dash = /^-/
      ends_with_dash = /-$/
      ends_with_period = /\.$/

      if has_consecutive_dash.test(value) or all_numeric.test(value) or starts_with_dash.test(value) or ends_with_dash.test(value) or ends_with_period.test(value)
        valid = false

      valid == true
     ), "Please enter valid name format."

    switch type
      when "NS", "CNAME", "MX"
        $.validator.addMethod 'powerdnsContentValidation', ((value, element) ->
          valid_domain.test value
        ), 'Content should be a valid Domain format'
      when "A"
        $.validator.addMethod 'powerdnsContentValidation', ((value, element) ->
          valid_ip.test value
        ), 'Content should be a valid IP address format.'
      when "AAAA"
        $.validator.addMethod 'powerdnsContentValidation', ((value, element) ->
          valid_ipv6.test value
        ), 'Content should be a valid IPv6 format.'
      when "TXT"
        $.validator.addMethod 'powerdnsContentValidation', ((value, element) ->
          printable_ascii_char.test value
        ), 'Content should be a printable ASCII Char.'
      when "SRV" then
    return

  $("#pdnsNewDynamicTableForm").on "mouseenter", ".submitDnsDynamicForm", (e) ->
    $("#pdnsErrors").empty()
    thisFormID = $(this).parent().parent().parent().attr('id')
    change_validators($("#" + thisFormID).find(".powerdns_record_type :input").val())
    DnsRecordValidator.validatePowerdnsForm(thisFormID)
    $("#pdnsErrors").empty()
    $("#" + thisFormID).find("#powerdns_record_type").removeData('previousValue')
    $("#" + thisFormID).validate().element("#powerdns_record_type")

  $("#pdnsNewDynamicTableForm").on "mouseenter", "#submitEditDnsDynamicForm", (e) ->
    $(".editPdnsErrors").empty()
    $("#powerdns_record_type").removeData('previousValue')
    thisFormID = $(this).parent().parent().parent().attr('id')
    change_validators($("#" + thisFormID).find(".powerdns_record_type :input").val())
    DnsRecordValidator.validatePowerdnsForm(thisFormID)
    $("#" + thisFormID).find(".powerdns_record_type").removeData('previousValue')
    $("#" + thisFormID).validate().element(".powerdns_record_type")

  $("#addPowerDnsBtn").click (e) ->
    e.preventDefault()
    pdnsFormTemplate = $("#new_powerdns_record").clone()
    pdnsFormTemplate.removeAttr("id")
    pdnsFormTemplate.attr("id", "new_powerdns_record_dynamic_form")
    $("#dnsDynamicForm").html(pdnsFormTemplate)
    $(".submitDnsDynamicForm").removeClass("disabled")
    $(".cancelDnsDynamicForm").removeClass("disabled")
    goToByScroll($("#dnsDynamicForm").attr("id"))

  $("#pdnsNewDynamicTableForm").on "click", ".pdnsEditButton", (e) ->
    $(".cancelDnsDynamicForm").trigger("click")
    $(document.body).css 'cursor': 'wait'

  $("#pdnsNewDynamicTableForm").on "click", ".pdnsDeleteButton", (e) ->

  $("#pdnsNewDynamicTableForm").on "click", ".submitDnsDynamicForm", (e) ->
    $("#pdnsErrors").empty()
    if $("#new_powerdns_record_dynamic_form").valid()
      $(".submitDnsDynamicForm").addClass("disabled")
      $(".cancelDnsDynamicForm").addClass("disabled")
      $(document.body).css 'cursor': 'wait'

  $("#pdnsNewDynamicTableForm").on "click", "#submitEditDnsDynamicForm", (e) ->
    $(".editPdnsErrors").empty()
    # if $(".new_powerdns_record").valid()
    #   $("#submitEditDnsDynamicForm").addClass("disabled")
    #   $("#cancelEditDnsDynamicForm").addClass("disabled")
    #   $(document.body).css 'cursor': 'wait'

  $("#pdnsNewDynamicTableForm").on "click", "#cancelEditDnsDynamicForm", (e) ->
    $("#submitEditDnsDynamicForm").addClass("disabled")
    $("#cancelEditDnsDynamicForm").addClass("disabled")
    $(document.body).css 'cursor': 'wait'

  $("#pdnsNewDynamicTableForm").on "click", ".cancelDnsDynamicForm", (e) ->
    e.preventDefault()
    $("#pdnsErrors").empty()
    $(this).parent().parent().parent().remove()

  $("#pdnsNewDynamicTableForm").on "click", "#powerdns_record_type", (e) ->
    record_type = $(this).val()
    change_fields(record_type)
    change_validators(record_type)
    clearForm()

  $("#pdnsNewDynamicTableForm").on "keyup", "#powerdns_record_type", (e) ->
    record_type = $(this).val()
    change_fields(record_type)
    change_validators(record_type)
    clearForm()
